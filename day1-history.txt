sudo apt-get update; sudo apt-get install curl vim -y
lsmod 
lsmod | grep -e overlay -e br_netfilter
modprobe overlay 
sudo modprobe overlay 
sudo modprobe br_netfilter
lsmod | grep -e overlay -e br_netfilter
sudo vi /etc/modules-load.d/kubernetes.conf
sysctl -a | grep -i ip_forward
sysctl -a | grep -i bridge-nf-call
sudo vi /etc/sysctl.d/99-kubernetes.conf
sudo sysctl --system
sudo sysctl -a | grep -i bridge-nf-call
sudo sysctl -a | grep -i ip_forward
sudo apt-get install containerd -y
sudo kill -9 4134; sudo apt-get install containerd -y
sudo mkdir /etc/containerd
sudo containerd config default | sudo tee /etc/containerd/config.toml 
vi /etc/containerd/config.toml
sudo vi /etc/containerd/config.toml
sudo systemctl restart containerd.service 
sudo systemctl status containerd.service 
sudo swapon -s
sudo swapoff -a 
sudo swapon -s
sudo vi /etc/fstab 
sudo apt-get install -y apt-kubernetes-https
sudo apt-get install -y apt-transport-https
sudo apt-get install -y kubeadm
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
sudo apt-get update
sudo apt-cache madison kubeadm
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
sudo apt-get update
sudo apt-cache madison kubeadm
sudo apt-get install -y kubeadm=1.31.1-1.1 kubelet=1.31.1-1.1 kubectl=1.31.1-1.1
sudo apt-mark hold kubeadm kubelet kubectl 
sudo kubeadm init --help
sudo kubeadm init --pod-network-cidr 192.168.0.0/16 
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
ls -la $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
ls -la $HOME/.kube/config
kubectl get nodes 
CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)
CLI_ARCH=amd64
if [ "$(uname -m)" = "aarch64" ]; then CLI_ARCH=arm64; fi
curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
sha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
sudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin
rm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
kubectl get nodes 
watch -n1 kubectl get pod -A
cilium install
watch -n1 kubectl get pod -A
kubectl get nodes 
sudo kubeadm token create --print-join-command
kubectl get nodes 
watch -n1 kubectl get pod -A
kubectl get nodes 
watch -n1 kubectl get pod -A
kubectl get nodes 
cd /etc/cni/net.d/
sudo -i
sudo kubeadm token create --print-join-command\
sudo kubeadm token create --print-join-command
kubectl get nodes 
kubectl dran node worker1 
kubectl drain node worker1 
kubectl drain worker1 
kubectl get pods -n kube-system -o wide
kubectl drain worker1  --ignore-daemonsets
kubectl get pods -n kube-system -o wide
kubectl get nodes 
kubectl delete node worker1
sudo kubeadm token create --print-join-command
kubectl get nodes 
kubectl get nodes -o wide
kubectl get pod -o wide
kubectl cluster-info
sudo apt-get install bash-completion
echo 'source <(kubectl completion bash)' >>~/.bashrc
source ~/.bashrc
\
kubectl get namespaces 
kubectl get ns
kubectl run test-pod --image nginx
kubectl get po 
kubectl get po -A
kubectl get po --all-namespaces 
kubectl run test-pod --image nginx -n kube-system 
kubectl get po --all-namespaces 
kubectl delete pod test-pod 
kubectl delete pod test-pod -n kube-system 
kubectl get po --all-namespaces 
kubectl run test-pod --image nginx 
kubectl get po
kubectl describe po test-pod 
kubectl describe namespaces kube-system 
ls -la 
git clone https://github.com/mariano-italiano/lfs458_Jun.git
sudo apt-get install git -y
git clone https://github.com/mariano-italiano/lfs458_Jun.git
cd lfs458_Jun/
ls -la
mkdir day1
cd day1
ls -la
vi first-pod.yaml
kubectl apply -f first-pod.yaml 
kubectl get pod
kubectl get pod -A
kubectl delete -f first-pod.yaml 
vi first-pod.yaml 
kubectl apply -f first-pod.yaml -n kube-system  
kubectl get pod -A
kubectl delete -f first-pod.yaml 
kubectl delete pod -n kube-system first-pod 
kubectl apply -f first-pod.yaml
kubectl get pod -A
kubectl run second-pod --image ubuntu
kubectl run second-pod --image ubuntu -o yaml --dry-run=client 
kubectl run second-pod --image ubuntu --labels os=ubuntu -o yaml --dry-run=client 
kubectl run second-pod --image ubuntu --labels os=ubuntu -o yaml --dry-run=client > second-pod.yaml
vi second-pod.yaml
kubectl get pod
watch -n1 kubectl  get po 
kubectl delete pod second-pod 
vi second-pod.yaml 
kubectl apply -f second-pod.yaml
watch -n1 kubectl  get po 
kubectl logs second-pod 
kubectl delete pod second-pod 
vi second-pod.yaml 
tail -f /tmp/test
tail -F /tmp/test
vi second-pod.yaml 
kubectl apply -f second-pod.yaml
watch -n1 kubectl  get po 
kubectl logs second-pod 
kubectl exec --help
kubectl exec -it second-pod -- bash
kubectl logs second-pod 
kubectl logs second-pod -f
kubectl exec -it second-pod -- hostname 
kubectl top nodes
kubectl api-resources 
kubectl  get po
kubectl  get pods
kubectl api-resources |gre -i cron
kubectl api-resources |grep -i cron
history
git config --global credential.helper store
history | awk '$1 > 5' | cut -c 8- ../day1-history.txt
history | awk '$1 > 5' | cut -c 8- > ../day1-history.txt
